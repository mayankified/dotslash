import { useState, useRef, useEffect } from "react";
import { motion, AnimatePresence, LayoutGroup } from "framer-motion";
import { Send, MessageSquare, X, Bot, User } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import axios from "axios";

export default function Chatbot() {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState<{ sender: string; text: string }[]>([]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const chatRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    chatRef.current?.scrollTo({ top: chatRef.current.scrollHeight, behavior: "smooth" });
  }, [messages, isTyping]);

  const handleSendMessage = async () => {
    if (!input.trim()) return;
    
    const newMessage = { sender: "user", text: input };
    setMessages((prev) => [...prev, newMessage]);
    setInput("");
    setIsTyping(true);

    try {
      const response = await axios.post("https://hacktu-backend.onrender.com/chat", {
        session_id: "user123",
        user_message: input,
      });

      if (response.data && response.data.advisor_response) {
        setMessages((prev) => [...prev, { sender: "bot", text: response.data.advisor_response }]);
      } else {
        setMessages((prev) => [...prev, { sender: "bot", text: "I couldn't understand. Try again!" }]);
      }
    } catch (error) {
      setMessages((prev) => [...prev, { sender: "bot", text: "Error fetching response. Try again!" }]);
    }
    setIsTyping(false);
  };

  return (
    <>
      {/* Floating Chat Icon */}
      <motion.button
        className="fixed bottom-6 right-6 p-4 bg-primary text-white rounded-full shadow-xl hover:shadow-2xl transition-shadow"
        onClick={() => setOpen(true)}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.95 }}
      >
        <MessageSquare className="w-7 h-7" />
      </motion.button>

      {/* Chat Modal */}
      <AnimatePresence>
        {open && (
          <>
            <motion.div
              className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setOpen(false)}
            />

            <motion.div
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 50 }}
              className="fixed bottom-6 right-6 z-50 w-full max-w-md h-[85vh]"
            >
              <Card className="w-full h-full bg-background/95 backdrop-blur-lg shadow-2xl rounded-2xl relative flex flex-col">
                {/* Header */}
                <CardHeader className="bg-gradient-to-r from-primary to-primary/90 text-white rounded-t-2xl flex flex-row justify-between items-center px-6 py-4">
                  <div className="flex items-center space-x-3">
                    <Bot className="w-6 h-6" />
                    <CardTitle className="text-lg">Dhanमित्र</CardTitle>
                  </div>
                  <Button
                    size="icon"
                    variant="ghost"
                    className="rounded-full hover:bg-white/10 text-white"
                    onClick={() => setOpen(false)}
                  >
                    <X className="w-5 h-5" />
                  </Button>
                </CardHeader>

                {/* Chat Content */}
                <CardContent className="flex-1 flex flex-col p-0">
                  <ScrollArea ref={chatRef} className="flex-1 p-4">
                    <LayoutGroup>
                      <div className="space-y-4">
                        <AnimatePresence initial={false}>
                          {messages.map((msg, index) => (
                            <motion.div
                              key={index}
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              exit={{ opacity: 0, x: msg.sender === "user" ? 50 : -50 }}
                              transition={{ duration: 0.2 }}
                              className={`flex gap-3 ${msg.sender === "user" ? "flex-row-reverse" : "flex-row"}`}
                            >
                              <div className="flex items-start">
                                {msg.sender === "bot" ? (
                                  <Bot className="w-5 h-5 mt-2 text-primary" />
                                ) : (
                                  <User className="w-5 h-5 mt-2 text-muted-foreground" />
                                )}
                              </div>
                              <div
                                className={`max-w-[75%] rounded-2xl p-4 ${
                                  msg.sender === "user"
                                    ? "bg-primary text-primary-foreground rounded-br-sm"
                                    : "bg-muted text-foreground rounded-bl-sm"
                                }`}
                              >
                                <p className="text-sm leading-relaxed">{msg.text}</p>
                              </div>
                            </motion.div>
                          ))}
                        </AnimatePresence>

                        {isTyping && (
                          <motion.div
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            className="flex items-center gap-3 pl-1"
                          >
                            <Bot className="w-5 h-5 text-primary" />
                            <div className="flex space-x-1 bg-muted rounded-2xl px-4 py-3">
                              <div className="w-2 h-2 bg-foreground rounded-full animate-bounce" />
                              <div className="w-2 h-2 bg-foreground rounded-full animate-bounce delay-100" />
                              <div className="w-2 h-2 bg-foreground rounded-full animate-bounce delay-200" />
                            </div>
                          </motion.div>
                        )}
                      </div>
                    </LayoutGroup>
                  </ScrollArea>

                  {/* Input Area */}
                  <div className="border-t p-4 bg-background">
                    <div className="flex items-center gap-2">
                      <Input
                        className="flex-1 rounded-full px-6 h-12 border-2 border-primary/20 focus:border-primary/50"
                        placeholder="Ask me anything..."
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        onKeyDown={(e) => e.key === "Enter" && handleSendMessage()}
                      />
                      <Button
                        size="icon"
                        className="rounded-full h-12 w-12 bg-primary hover:bg-primary/90 transition-colors"
                        onClick={handleSendMessage}
                      >
                        <Send className="w-5 h-5" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </>
  );
}
